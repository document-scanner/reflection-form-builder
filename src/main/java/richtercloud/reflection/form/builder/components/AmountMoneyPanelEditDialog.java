/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package richtercloud.reflection.form.builder.components;

import java.awt.Frame;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.jscience.economics.money.Currency;
import richtercloud.reflection.form.builder.message.Message;
import richtercloud.reflection.form.builder.message.MessageHandler;

/**
 *
 * @author richter
 */
public class AmountMoneyPanelEditDialog extends javax.swing.JDialog {
    private static final long serialVersionUID = 1L;
    private final DefaultComboBoxModel<Currency> currencyComboBoxModel = new DefaultComboBoxModel<>();
    private final AmountMoneyCurrencyStorage amountMoneyCurrencyStorage;
    private final MessageHandler messageHandler;

    /**
     * Creates new form AmountMoneyPanelEditDialog
     * @param currency
     * @param amountMoneyCurrencyStorage
     * @param messageHandler
     * @param parent
     * @throws richtercloud.reflection.form.builder.components.AmountMoneyCurrencyStorageException
     */
    public AmountMoneyPanelEditDialog(Currency currency,
            AmountMoneyCurrencyStorage amountMoneyCurrencyStorage,
            MessageHandler messageHandler,
            Frame parent) throws AmountMoneyCurrencyStorageException {
        super(parent, true);
        this.messageHandler = messageHandler;
        if(currency != null) {
            if(!amountMoneyCurrencyStorage.getCurrencies().contains(currency)) {
                throw new IllegalArgumentException(String.format("Currency '%s' isn't managed in amountMoneyCurrencyStorage and thus can't be edited", currency.getCode()));
            }
            codeTextField.setText(currency.getCode());
            exchangeRateSpinner.setValue(currency.getExchangeRate());
        }
        for(Currency currency0 : amountMoneyCurrencyStorage.getCurrencies()) {
            this.currencyComboBoxModel.addElement(currency0);
        }
        this.amountMoneyCurrencyStorage = amountMoneyCurrencyStorage;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codeTextField = new javax.swing.JTextField();
        codeTextFieldLabel = new javax.swing.JLabel();
        referenceComboBox = new javax.swing.JComboBox<>();
        referenceComboBoxLabel = new javax.swing.JLabel();
        exchangeRateSpinner = new javax.swing.JSpinner();
        exchangeRateSpinnerLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        codeTextFieldLabel.setText("Code");

        referenceComboBox.setModel(currencyComboBoxModel);

        referenceComboBoxLabel.setText("Reference currency");

        exchangeRateSpinner.setValue(1.0);

        exchangeRateSpinnerLabel.setText("Exchange rate to reference currency");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(codeTextFieldLabel)
                            .addComponent(referenceComboBoxLabel)
                            .addComponent(exchangeRateSpinnerLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(referenceComboBox, 0, 100, Short.MAX_VALUE)
                            .addComponent(codeTextField)
                            .addComponent(exchangeRateSpinner, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codeTextFieldLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(referenceComboBoxLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exchangeRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exchangeRateSpinnerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
        this.dispose(); //reset at close
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String code = this.codeTextField.getText();
        Currency reference = (Currency) this.referenceComboBox.getSelectedItem();
        Double exchangeRate = (Double) this.exchangeRateSpinner.getValue();
        Currency newCurrency = new Currency(code);
        Currency.setReferenceCurrency(reference);
        newCurrency.setExchangeRate(exchangeRate);
        try {
            this.amountMoneyCurrencyStorage.saveCurrency(newCurrency);
        } catch (AmountMoneyCurrencyStorageException ex) {
            this.messageHandler.handle(new Message(String.format("An exception occured during retrieval of currencies from the storage: %s", ExceptionUtils.getRootCauseMessage(ex)), JOptionPane.ERROR_MESSAGE));
        }
        this.setVisible(false);
        this.dispose(); //reset at close
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField codeTextField;
    private javax.swing.JLabel codeTextFieldLabel;
    private javax.swing.JSpinner exchangeRateSpinner;
    private javax.swing.JLabel exchangeRateSpinnerLabel;
    private javax.swing.JComboBox<Currency> referenceComboBox;
    private javax.swing.JLabel referenceComboBoxLabel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
